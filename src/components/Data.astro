---
import { pool } from '../db';

export const urls = {
  inicio: "/#",
  cv: "cv",
  contacto: "contacto",
  portafolio: "portafolio",
  habilidades: "habilidades",
};

// Definimos una interfaz para tipar los datos que obtenemos de la base de datos
interface Data {
  id: number;
  dato: string;
  valor: string;
}

export async function getDatos() {
  try {
    // Especifica el tipo de resultado esperado de la consulta
    const [rows] = await pool.query<Data[]>('SELECT * FROM datos');
    
    // Inicializamos un objeto con un tipo explícito
    let data: { [key: string]: string } = {};

    // Recorre las filas obtenidas para construir el objeto `data`
    rows.forEach((row: Data) => {
      data[row.dato] = row.valor; // Mapea cada dato con su valor correspondiente
    });

    return data;
  } catch (error) {
    console.error('Error al obtener datos de contacto:', error);
  }
}

interface Project {
  id: number;
  img: string;
  nombre: string;
  descripcion: string;
  url: string;
  tecnologias: Tecnology[];
}

interface Tecnology {
  id: number;
  img: string;
  url: string;
}

export async function getProjects(): Promise<Project[] | undefined> {
  try {
    // Consulta para obtener proyectos con sus tecnologías asociadas y las imágenes correspondientes
    const [rows] = await pool.query<any[]>(
      `SELECT 
         p.id AS projectId, 
         p.nombre AS projectName, 
         p.descripcion AS projectDescription, 
         p.img AS projectImg,
         p.url AS projectUrl,
         t.id AS techId, 
         t.img AS techImg, 
         t.url AS techUrl
       FROM 
         projects p
       LEFT JOIN 
         projects_tecnologias pt ON p.id = pt.project_id
       LEFT JOIN 
         tecnologias t ON pt.tecnologia_id = t.id
       ORDER BY 
         p.id, t.id`
    );

    // Procesa los resultados para agrupar las tecnologías por proyecto
    const projectsMap = new Map<number, Project>();

    for (const row of rows) {
      const projectId = row.projectId;

      if (!projectsMap.has(projectId)) {
        projectsMap.set(projectId, {
          id: projectId,
          nombre: row.projectName,
          descripcion: row.projectDescription,
          img: row.projectImg,
          url: row.projectUrl,
          tecnologias: []
        });
      }

      if (row.techId) {
        projectsMap.get(projectId)?.tecnologias?.push({
          id: row.techId,
          img: row.techImg,  // Utiliza la URL de la imagen de la tecnología
          url: row.techUrl   // Asumiendo que también se quiere usar la URL para otro propósito
        });
      }
    }

    // Convierte el mapa a un array
    const projects = Array.from(projectsMap.values());

    return projects;

  } catch (error) {
    console.error('Error al obtener datos de proyectos:', error);
    return undefined;
  }
}

interface Habilidades {
  id: number;
  img: string;
  nombre: string;
  descripcion: string;
  url: string;
}

export async function getHabilidades(): Promise<Habilidades[] | undefined> {
  try {
    // Especifica el tipo de resultado esperado de la consulta
    const [rows] = await pool.query<Habilidades[]>('SELECT * FROM habilidades');  

    return rows;
  } catch (error) {
    console.error('Error al obtener datos de habilidades:', error);
    return undefined;
  }
}
---