---
import { pool } from '../db'; // Importa la conexión a la base de datos

// Define un objeto con rutas para diferentes secciones de la aplicación
export const urls = {
  inicio: "/#", // Ruta para la página de inicio
  cv: "cv", // Ruta para el currículum
  contacto: "contacto", // Ruta para la sección de contacto
  portafolio: "portafolio", // Ruta para el portafolio
  habilidades: "habilidades", // Ruta para la sección de habilidades
};

// Definimos una interfaz para tipar los datos que obtenemos de la base de datos
interface Data {
  id: number; // ID del dato
  dato: string; // Nombre del dato
  valor: string; // Valor del dato
}

// Función asíncrona para obtener datos de la base de datos
export async function getDatos() {
  try {
    // Especifica el tipo de resultado esperado de la consulta
    const [rows] = await pool.query<Data[]>('SELECT * FROM datos');
    
    // Inicializamos un objeto con un tipo explícito
    let data: { [key: string]: string } = {};

    // Recorre las filas obtenidas para construir el objeto `data`
    rows.forEach((row: Data) => {
      data[row.dato] = row.valor; // Mapea cada dato con su valor correspondiente
    });

    return data; // Devuelve el objeto con los datos
  } catch (error) {
    console.error('Error al obtener datos de contacto:', error); // Manejo de errores
  }
}

// Interfaz para representar un proyecto
interface Project {
  id: number; // ID del proyecto
  img: string; // URL de la imagen del proyecto
  nombre: string; // Nombre del proyecto
  descripcion: string; // Descripción del proyecto
  url: string; // URL del proyecto
  tecnologias: Tecnology[]; // Lista de tecnologías utilizadas en el proyecto
}

// Interfaz para representar una tecnología
interface Tecnology {
  id: number; // ID de la tecnología
  img: string; // URL de la imagen de la tecnología
  url: string; // URL de la tecnología
}

// Función asíncrona para obtener proyectos de la base de datos
export async function getProjects(): Promise<Project[] | undefined> {
  try {
    // Consulta para obtener proyectos con sus tecnologías asociadas y las imágenes correspondientes
    const [rows] = await pool.query<any[]>(
      `SELECT 
         p.id AS projectId, 
         p.nombre AS projectName, 
         p.descripcion AS projectDescription, 
         p.img AS projectImg,
         p.url AS projectUrl,
         t.id AS techId, 
         t.img AS techImg, 
         t.url AS techUrl
       FROM 
         projects p
       LEFT JOIN 
         projects_tecnologias pt ON p.id = pt.project_id
       LEFT JOIN 
         tecnologias t ON pt.tecnologia_id = t.id
       ORDER BY 
         p.id, t.id` // Ordena los resultados por ID de proyecto y tecnología
    );

    // Procesa los resultados para agrupar las tecnologías por proyecto
    const projectsMap = new Map<number, Project>(); // Mapa para almacenar proyectos

    for (const row of rows) {
      const projectId = row.projectId; // ID del proyecto actual

      if (!projectsMap.has(projectId)) {
        // Si el proyecto no está en el mapa, lo agrega
        projectsMap.set(projectId, {
          id: projectId,
          nombre: row.projectName,
          descripcion: row.projectDescription,
          img: row.projectImg,
          url: row.projectUrl,
          tecnologias: [] // Inicializa la lista de tecnologías vacía
        });
      }

      if (row.techId) {
        // Si el proyecto tiene tecnologías asociadas, las añade
        projectsMap.get(projectId)?.tecnologias?.push({
          id: row.techId,
          img: row.techImg,  // Utiliza la URL de la imagen de la tecnología
          url: row.techUrl   // Asumiendo que también se quiere usar la URL para otro propósito
        });
      }
    }

    // Convierte el mapa a un array
    const projects = Array.from(projectsMap.values());

    return projects; // Devuelve la lista de proyectos

  } catch (error) {
    console.error('Error al obtener datos de proyectos:', error); // Manejo de errores
    return undefined; // Devuelve undefined en caso de error
  }
}

// Interfaz para representar habilidades
interface Habilidades {
  id: number; // ID de la habilidad
  img: string; // URL de la imagen de la habilidad
  nombre: string; // Nombre de la habilidad
  descripcion: string; // Descripción de la habilidad
  url: string; // URL de la habilidad
}

// Función asíncrona para obtener habilidades de la base de datos
export async function getHabilidades(): Promise<Habilidades[] | undefined> {
  try {
    // Especifica el tipo de resultado esperado de la consulta
    const [rows] = await pool.query<Habilidades[]>('SELECT * FROM habilidades');  

    return rows; // Devuelve la lista de habilidades
  } catch (error) {
    console.error('Error al obtener datos de habilidades:', error); // Manejo de errores
    return undefined; // Devuelve undefined en caso de error
  }
}
---